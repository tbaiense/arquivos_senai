package japedidos.pedido;

import java.util.Date;

import japedidos.produto.Produto;
import japedidos.cliente.Cliente;
import japedidos.dados.Endereco;
import japedidos.dados.Telefone;
import japedidos.sistema.AtividadeAtual;
import japedidos.filial.Filial;

/**
 * @author t.baiense
 */
public class Pedido {
	private AtividadeAtual atividade; // Controla o que está sendo feito no pedido
	private int id;
	Cliente cliente;
	Destinatario destinatario;
	
	static public class Destinatario {
		private String nome, info;
		private Telefone telefone;
		
		Destinatario(String nome, Telefone telefone) {
			setNome(nome);
			set(telefone);
		}
		
		public final String getNome() {
			return this.nome;
		}
		
		
		public final Telefone getTelefone() {
			return this.telefone;
		}
		
		public final String getInfo() {
			return this.info;
		}
		
		public final void setNome(String nome) {
			if(nome != null) {
				this.nome = nome;
			}
		}

		public final void set(Telefone tel) {
			if(tel != null) {
				this.telefone = tel;			
			}
		}
		
		public final void setInfo(String info) {
			if(info != null) {
				this.info = info;		
			}
		}
		
		public static final String MSG_EX_NULL = "o cliente e nulo";
	}

	
	//TODO entrega >> tipo, dataEntregar, horaEntregar, dataEntregue, horaEntregue
	//TODO andamento >> estado, intercorrencias
	//TODO pagamento >> estado, dataVencimento
	Destino destino;
	
	static public class Destino extends Endereco {
		public String infoAdicional;
		private static String DEFAULT_ESTADO = "Espírito Santo";
		private static String DEFAULT_PAIS = "Brasil";
		
		public Destino(String rua, String numero, String bairro, String cidade, String estado, String pais) {
			super(rua, numero, bairro, cidade, estado, pais);
		}
		
		public Destino(String rua, String numero, String bairro, String cidade) {
			super(rua, numero, bairro, cidade, DEFAULT_ESTADO, DEFAULT_PAIS);
		}
		
		public Destino(String rua, String numero, String bairro, String cidade, String estado) {
			super(rua, numero, bairro, cidade, estado, DEFAULT_PAIS);
		}
		
		public final void setInfoAdicional(String info) {
			this.infoAdicional = info;
		}
	}
	
	Filial filialOrigem;
	Produtos produtos;
	
	static public class Produtos {
		private Item[] itens; //Deve ter tamanho fixo ao ser criado e não conterá null
		private int total=0; // Quantidade de itens distintos
		
		static private class Item {
			private final Produto produto;
			private int quantidade;
			
			Item(Produto produto, int quantidade) {
				if(produto == null) {
					throw new NullPointerException("Produto não pode ser nulo.");
				}
				// TODO verificar se o valor de quantidade informada é aplicável à unidade do produto
				if(quantidade <= 0) {
					throw new IllegalArgumentException("quantidade deve ser maior que zero.");
				}
				
				this.produto = produto;
				this.quantidade = quantidade;
			}
			
			Produto getProduto() {
				return this.produto;
			}
			
			int getQtd() {
				return this.quantidade;
			}

			void setQtd(int q) {
				if(q <= 0)
					throw new IllegalArgumentException("quantidade nao pode ser inferior a 1");
				
				this.quantidade = q;
			}
			// totalVenda();
			// totalCusto();
		}
		
		public final void getInfoAll(IntFunction f) {
			if(!isEmpty()) {
				for(int i = 0; i < itens.length; i++) {
					System.out.println(f.executar(i));
				}
			}
		}
		
		public final void getInfoAll(ProdutoFunction f) {
			if(!isEmpty()) {
				for(int i = 0; i < itens.length; i++) {
					System.out.println(f.executar(i));
				}
			}
		}
		
		public final int total() {
			return this.total;
		}
		
		public final Produto getProduto(int index) {
			validateIndex(index);
			return this.itens[index].getProduto();
		}
		
		public final int indexOf(Produto produto) {
			if(produto == null)
	                    throw new IllegalArgumentException("produto nao pode ser nulo");
			
			for(int i=0; i < this.total; i++) {
				if (getProduto(i).equals(produto)) {
					return i;
				}
			}
			return -1;
		}
		
	    public final void add(Produto produto) {
	            this.add(produto, 1);
	        }
	        
		public final void add(Produto produto, int quantidade) { // Controla a adicao ou incremento de produtos
			if (produto == null)
				throw new IllegalArgumentException("item não pode ser nulo");
			
			if(quantidade <= 0) {
				throw new IllegalArgumentException("quantidade deve ser maior que zero.");
			}
			
			if (itens != null) {
	            int i;
	            for(i=0; i < itens.length; i++) {
	                    if(itens[i].getProduto().id == produto.id) {
	                        quantidade += itens[i].getQtd();
	                        setQtd(i, quantidade);
	                        return;
	                    }
	            }

	            this.append(new Item(produto, quantidade));
			} else {
	            itens = new Item[1];
	            this.append(new Item(produto, quantidade));
			}
		}
		
		private final void append(Item item) { // Insere novos itens
	            if(item == null) 
	                throw new IllegalArgumentException("item não pode ser nulo");
	            if (itens != null) {
	                int novoTamanho = this.total+1;
	                Item[] novosItens = new Item[novoTamanho];
	                int i;
	                for(i=0; i < this.total; i++) {
	                        novosItens[i] = this.itens[i];
	                }
	                novosItens[i] = item;
	                this.itens = novosItens;
	                this.total = novoTamanho;
	            } else {
	                throw new IllegalStateException("itens nao pode estar vazio");
	            }
		}
		
		public final void remove(int index) {
	            validateIndex(index);
	            if (this.total == 1) {
	                this.itens = null;
	                return;
	            }
	            
	            int novoTamanho = this.total-1;
	            Item[] novosItens = new Item[novoTamanho];


	            for(int n=0,v=0; v < this.total; v++) {
	                if(v != index) { // Se item da lista é diferente do a ser removido, adiciona à nova lista
	                    Item atual = this.itens[v];
	                    novosItens[n] = atual;
	                    n++; // Só avança a posição se o item adicionado não for o a ser removido
	                }
	            }
	            this.itens = novosItens;	
	            this.total = novoTamanho;
		}
		
		// totalVenda();
		// totalCusto();
		
		public final void setQtd(int index, int quantidade) { // Seta o valor de quantidade de dado produto
	        if(total == 0) {
	            throw new IllegalStateException("nao e possivel adicionar com itens vazio");
	        }
	       validateIndex(index);
	       
	        this.itens[index].setQtd(quantidade);
		}

	    public final int getQtd(int index) {
	        validateItens();
	        validateIndex(index);
	        return this.itens[index].getQtd();
	    }

	    public final boolean isEmpty() {
	            if(this.itens == null)
	                return true;
	            else
	                return false;
	        }
	        
		private final void validateItens(Item[] itens) {
	            if (itens == null) {
	                throw new IllegalStateException("array de itens nao pode ser nulo");
	            }
		}
		
		private final void validateItem(Item item) {
	            if (item == null) {
	                    throw new NullPointerException("item nao pode ser nulo.");
	            }
		}
		private final void validateItens() {
	            if (this.isEmpty()) {
	                throw new IllegalStateException("array de itens nao pode ser nulo");
	            }
	        }
		private final void validateIndex(int index) {
	            if(index < 0 || index > this.total-1) {
	                throw new ArrayIndexOutOfBoundsException("indice fora do intervalo do vetor");
	            }
		}
	}
	
	Date dataCriacao;
	private double valorTotalVenda;
	private double valorTotalCusto;
	
	public Pedido() {
		produtos = new Produtos();
	}
	
	public final int getId() {
		if(atividade == AtividadeAtual.VISUALIZACAO || atividade == AtividadeAtual.EDICAO) {
			return this.id;			
		}
		
		return -1;
	}
	
	public final Pedido novo() { // Define o pedido como novo e permite inserção de dados
		if(atividade != null) {
			throw new IllegalStateException();
		}
		atividade = AtividadeAtual.CRIACAO;
		return this;
	}
	
	public final Pedido cadastrar() { // Valida e envia os dados ao banco
		// TODO validadar dados
		// TODO CODIGO DE BANCO... receber id
		// ...
		atividade = AtividadeAtual.VISUALIZACAO;
		// this.carregar(id);
		return this;
	}
	
	public final Pedido carregar(int id) { // Obtem informacoes do pedido do banco
		if (atividade == AtividadeAtual.CRIACAO) {
			throw new IllegalStateException();
		}
		atividade = AtividadeAtual.CARREGAMENTO;
		
		// TODO CODIGO DE BANCO...
		// ...
		// TODO executar setters com dados do banco
		
		
		this.id = id;
		atividade = AtividadeAtual.VISUALIZACAO;
		return this;
	}
	
	public final Pedido carregar() {
		if (atividade == null || atividade == AtividadeAtual.CRIACAO || atividade == AtividadeAtual.CARREGAMENTO) {
			throw new IllegalStateException();
		}
		
		return this.carregar(this.id);
	}
	
	public final Pedido edicao() { // Entra em modo edicao
		
		atividade = AtividadeAtual.EDICAO;
		return this;
	}
	
	public final Pedido editar() { // Valida dados e atualiza pedido no banco
		// TODO validadar dados
		// TODO CODIGO DE BANCO...
		// ...
		atividade = AtividadeAtual.VISUALIZACAO;
		return this;
	}
	
	final Pedido set(Cliente cliente) {
		checarAtividadeMudanca();
		
		if (cliente == null) {
			throw new IllegalArgumentException(Cliente.MSG_EX_NULL);
		}
		
		this.cliente = cliente;
		return this;
	}
	
	final Pedido set(Destinatario destinatario) {
		checarAtividadeMudanca();
		
		if (destinatario == null) {
			throw new IllegalArgumentException(Destinatario.MSG_EX_NULL);
		}
		
		this.destinatario = destinatario;
		return this;
	}
	
	final Pedido set(Destino destino) {
		checarAtividadeMudanca();
		
		if (destino == null) {
			throw new IllegalArgumentException(Destinatario.MSG_EX_NULL);
		}
		
		this.destino = destino;
		return this;
	}
	
	final Pedido set(Filial filialOrigem) {
		checarAtividadeMudanca();
		
		if (filialOrigem == null) {
			throw new IllegalArgumentException();
		}
		
		this.filialOrigem = filialOrigem;
		return this;
	}
	
	final Pedido add(Produto produto) {
		checarAtividadeMudanca();
		
		this.produtos.add(produto);
		return this;
	}
	
	final Pedido add(Produto produto, int quantidade) {
		checarAtividadeMudanca();
		
		this.produtos.add(produto, quantidade);
		return this;
	}
	
	final Pedido set(Produto produto, int quantidade) {
		checarAtividadeMudanca();
		
		int indexProd = this.produtos.indexOf(produto); // Procura pelo produto
		
		if (indexProd != -1) {
			this.produtos.setQtd(indexProd, quantidade);
		}
		
		return this;
	}
	
	final Pedido remove(Produto produto) {
		checarAtividadeMudanca();
		
		int indexProd = this.produtos.indexOf(produto); // Procura pelo produto
		if (indexProd != -1) {
			this.produtos.remove(indexProd);
		}
		
		return this;
	}
	
	final private void checarAtividadeMudanca() {
		if (atividade == null || atividade == AtividadeAtual.VISUALIZACAO) {
			throw new IllegalStateException("acao nao permitida. so e possivel alterar o pedido durante a criacao ou em modo edicao");
		}
	}
	
}
